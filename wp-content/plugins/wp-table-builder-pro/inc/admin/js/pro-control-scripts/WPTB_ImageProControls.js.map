{"version":3,"sources":["WPTB_ImageProControls.js"],"names":["proImageControlModule","targetElement","targetElementId","_this2","this","parseSizeString","sizeStr","match","_wrapRegExp","width","unit","height","_match$groups","groups","element","currentMode","imageAlignment","watchList","imageImageSizeControlRelative","mode","handleRelativeMode","sizeVal","handleRelativeSelfSizing","alignment","targetImage","imageAnchor","querySelector","WPTB_ControlsManager","getElementControlValue","classList","remove","style","display","justifyContent","sizeObj","add","controlsChange","input","map","controlId","callback","Object","prototype","hasOwnProperty","call","_input$controlId","eventValue","elementId","WPTB_Helper"],"mappings":"k+FAAA,WA2GgB,IAAAA,EAAA,IApGZ,SAAgCC,EAAeC,GAAiB,IAAAC,EAAAC,KAC5D,SAAAC,EAAAC,GAGR,GAFAC,EAAAD,MAAAA,OAAA,EAAAA,EAAAC,MAAAC,YAAA,kDAAA,CAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,KAEA,CACQ,IAAAC,EAAAL,EAAAM,OAAeZ,EAAfW,EAAeX,MAAAA,EAAfW,EAAeX,OAAfS,EAAAE,EAAAF,KAGR,GAAAD,GAAAE,GAAAD,EACA,MAAA,CACAD,MAAAA,EAwBwBE,OAAAA,EAvBGD,KAAAA,GA6Bf,OAAO,KAnCXN,KAAKU,QAAUb,EAMfG,KAAKW,YAAc,KAhB3BX,KAAAY,eAAA,KAMQ,IAyBkBC,EAAA,CAAAC,8BAAA,SAAAC,GAAAhB,EAAAY,YAAAI,EAAdC,KAEIb,sBAAO,SAAAD,GACP,SAAAH,EAAAY,cAAAM,EAAOZ,EAAPH,GAAAgB,EAAAD,KAEIZ,eAAA,SAAAc,GACApB,EAAOa,eAAAO,EAEHZ,MAThBS,EAAA,WAkBA,IAKRI,EALQC,EAAAtB,EAAAW,QAAAY,cAAA,KACR,SAAAvB,EAAAY,aACAM,EAAAhB,EAAAsB,qBAAAC,uBAAA1B,EAAA,0BACAoB,EAAAD,KAEAG,EAAArB,EAAAW,QAAAY,cAAA,OAEAD,GAAAD,IA+BoBC,EAAYI,UAAUC,OAAO,0BAC7BN,EAAYO,MAAMtB,MAAQ,OA/BpBe,EAAAO,MAAApB,OAAA,QAELI,EAAcI,MAAnBa,QAAA,QACAZ,EAAkBW,MAAAE,eAAA,UAKdX,EAAAA,MAAAA,MAAA,WAAyBD,EAAzBL,eAAA,OAAAb,EAAAa,gBARZM,EAAA,SAAAY,GAkBA,IACRzB,EAAAE,EAAAD,EAgC0Be,EAjClBS,IACRzB,EAAAyB,EAAAzB,MAAAE,EAAAuB,EAAAvB,OAAAD,EAAAwB,EAAAxB,KACAD,GAAAE,GAAAD,IA+B0Be,EAActB,EAAKW,QAAQY,cAAc,KA9BnCF,EAAlBJ,EAAAA,QAAAA,cAA2B,OAiCjBK,GAAeD,IA/BlBT,EAAgBc,UAAQM,IAAA,0BACb9B,EAAAA,MAAgBsB,MAAhBtB,GAAAA,OAAgBsB,GAAhBtB,OAAqCuB,GACrDN,EAAyBD,MAAzBV,OAAAW,GAAAA,OAAAX,GAAAW,OAAAZ,GAEiBe,EAAQX,MAAQY,QAAAA,OAiCzBD,EAAYM,MAAME,eAAiB9B,EAAKa,mBAUxDZ,KAAKgC,eAAiB,SAACC,GA9BnBZ,OAAYM,KAAZM,GAAAC,IAA0B,SAAAC,GAnB9B,IAsBAC,EAtBAC,OAAAC,UAAAC,eAAAC,KAAAP,EAAAE,IAAAE,OAAAC,UAAAC,eAAAC,KAAA3B,EAAAsB,KAwBR,mBAFQC,EAAAvB,EAAAsB,KAGRC,EAAA,QAAAK,EAAAR,EAAAE,UAAA,IAAAM,OAAA,EAAAA,EAAAC,gBAGgB,CAAAhC,QAAAiC,WACAC,YAAIvC,gBAAmBC,QAAMV,EAAAoC,gBAAA,GA5G7C","file":"WPTB_ImageProControls.js","sourcesContent":["(() => {\n    /**\n     * Image pro controls module.\n     * @param {HTMLElement} targetElement target image element\n     * @param {String} targetElementId id of target element\n     * @constructor\n     */\n    function ImageProControlsModule(targetElement, targetElementId) {\n        /**\n         * Target image element.\n         * @type {HTMLElement}\n         */\n        this.element = targetElement;\n\n        /**\n         * Current mode of advanced image size controls.\n         * @type {null}\n         */\n        this.currentMode = null;\n\n        /**\n         * Alignment value for image element.\n         * @type {null}\n         */\n        this.imageAlignment = null;\n\n        /**\n         * Parse size string into object\n         *\n         * @param {string} sizeStr size in string representation\n         * @return {null|Object} parsed size object or null for invalid representations\n         */\n        const parseSizeString = (sizeStr) => {\n            const match = sizeStr?.match(/\\|\\|(?<width>\\d+\\.?\\d*)(?<unit>.+)(?::)(?<height>\\d+\\.?\\d*)/);\n\n            if (match) {\n                const {width, height, unit} = match.groups;\n\n                if (width && height && unit) {\n                    return {\n                        width,\n                        height,\n                        unit\n                    };\n                }\n            }\n\n            return null;\n        }\n\n        /**\n         * Watch list for control input changes.\n         *\n         * Keys for control ids and function to be called as values.\n         * Function values will be called with the value of the control.\n         *\n         * @type {Object}\n         */\n        const watchList = {\n            imageImageSizeControlRelative: (mode) => {\n                this.currentMode = mode;\n                handleRelativeMode();\n            },\n            imageImageSizeControl: (sizeStr) => {\n                if (this.currentMode === 'self') {\n                    const sizeVal = parseSizeString(sizeStr);\n                    handleRelativeSelfSizing(sizeVal);\n                }\n            },\n            imageAlignment: (alignment) => {\n                this.imageAlignment = alignment;\n\n                handleRelativeMode();\n            }\n        };\n\n        /**\n         * Handle relative mode operations\n         */\n        const handleRelativeMode = () => {\n            const imageAnchor = this.element.querySelector('a');\n            if (this.currentMode === 'self') {\n                const sizeVal = parseSizeString(WPTB_ControlsManager.getElementControlValue(targetElementId, 'imageImageSizeControl'));\n                handleRelativeSelfSizing(sizeVal);\n            } else {\n                const targetImage = this.element.querySelector('img');\n\n                if (imageAnchor && targetImage) {\n                    imageAnchor.classList.remove('wptb-plugin-width-full');\n                    targetImage.style.width = '100%';\n                    targetImage.style.height = 'unset';\n\n                    imageAnchor.style.display = 'block';\n                    imageAnchor.style.justifyContent = 'unset';\n                }\n            }\n\n            // update style float value for more fluid transition between relative modes\n            imageAnchor.style.float = this.imageAlignment === 'center' ? 'none' : this.imageAlignment;\n        }\n\n        /**\n         * Handle relative self mode operations.\n         * @param {Object} sizeObj size object\n         */\n        const handleRelativeSelfSizing = (sizeObj) => {\n            if (sizeObj) {\n                const {width, height, unit} = sizeObj;\n                if (width && height && unit) {\n                    const imageAnchor = this.element.querySelector('a');\n                    const targetImage = this.element.querySelector('img');\n\n                    if (imageAnchor && targetImage) {\n                        imageAnchor.classList.add('wptb-plugin-width-full');\n                        targetImage.style.width = `${width}${unit}`;\n                        targetImage.style.height = `${height}${unit}`;\n\n                        imageAnchor.style.display = 'flex';\n                        imageAnchor.style.justifyContent = this.imageAlignment;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Controls change callback function.\n         * @param {Object} input input object\n         */\n        this.controlsChange = (input) => {\n            Object.keys(input).map(controlId => {\n                if (Object.prototype.hasOwnProperty.call(input, controlId) && Object.prototype.hasOwnProperty.call(watchList, controlId)) {\n                    const callback = watchList[controlId];\n\n                    if (typeof callback === 'function') {\n                        callback(input[controlId]?.eventValue);\n                    }\n                }\n            })\n        }\n    }\n\n    const proImageControlModule = new ImageProControlsModule(element, elementId);\n\n    WPTB_Helper.controlsInclude(element, proImageControlModule.controlsChange, true);\n})()\n"]}